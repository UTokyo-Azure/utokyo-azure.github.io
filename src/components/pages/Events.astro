---
import assert from "assert";
import type { MDXInstance } from "astro";
import type { Frontmatter } from "@layouts/Layout.astro";
import If from "@components/utils/If.astro";
import type { Lang } from "@components/types";
import { getLocaleDateString } from "@data/utils/notices";

interface EventInformation {
  key: string;
  date: Date | null;
  title: string;
  href: string;
}

interface Props {
  show: string[];
  lang: Lang;
  alternative?: Record<this["show"][number], {date?: string; href?: string;}>;
}

const {
  show,
  lang,
  alternative,
} = Astro.props;

const allEventsList: Map<string, EventInformation> = new Map([
  await Astro.glob<MDXInstance<Frontmatter>>("/src/pages/events/*/index.{md,mdx}"),
  await Astro.glob<MDXInstance<Frontmatter>>("/src/pages/events/*.{md,mdx}"),
].flat().map((instance) => {
  const dateMatch = instance.file.match(/\/(([0-9]{4}-[0-9]{2}-[0-9]{2})?[^/]*)(?:\/index)?\.mdx?$/);
  assert(dateMatch !== null);
  assert(instance.url !== undefined);

  return [
    dateMatch[1],
    {
      key: dateMatch[1],
      date: dateMatch[2] ? new Date(dateMatch[2]) : null,
      title: instance.frontmatter.title?.replace(/^[0-9]{4}([/-])[0-9]{1,2}\1[0-9]{1,2}\s*/, "") ?? "",
      href: instance.url,
    },
  ];
}));

const eventsList: EventInformation[] = show.map((key) => {
  const eventInfo = allEventsList.get(key);
  if (eventInfo)
    return eventInfo;
  else
    throw new Error(`Event information entry for ${key} does not exist.`);
});
---

<If cond={eventsList.length > 0}>
<h2>{{
  "ja": "説明会資料",
  "en": "Recent Briefings and Materials"
}[lang]}</h2>

<ul>
  {
    Promise.all(eventsList.map(async ({ key, date, title, href }) => {
      const pack = (Astro.slots.has(key) ? await Astro.slots.render(key) : title).at(-1) === "）";
      const heldOnDate = (lang: Lang) => {
        const localeDate = alternative?.[key]?.date
          ?? (date !== null ? getLocaleDateString(date, lang, "long") : "");
        switch (lang) {
          case "ja":
            return `（${localeDate} 実施）`;
          case "en":
            return `(Held on ${localeDate})`;
        }
      }

      return (
        <li>
          <a href={alternative?.[key]?.href ?? href}>
            <If cond={Astro.slots.has(key)}>
              <Fragment set:html={Astro.slots.render(key)} />
              <Fragment slot="else">{title}</Fragment>
            </If>
            <span class:list={["date", { date__pack: pack }]}>{heldOnDate(lang)}</span>
          </a>
        </li>
    )}))
  }
</ul>
</If>

<style lang="scss">
  @import "@styles/color.scss";

  .date {
    text-decoration: inherit;
    font-size: .9rem;

    &:where(:lang(ja)) {
      margin-left: -0.5rem;
    }

    &__pack {
      margin-left: -1rem;
    }
  }
</style>
